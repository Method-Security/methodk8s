var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"methodk8s Documentation","text":"<p>Hello and welcome to the methodk8s documentation. While we always want to provide the most comprehensive documentation possible, we thought you may find the below sections a helpful place to get started.</p> <ul> <li>The Getting Started section provides onboarding material</li> <li>The Development header is the best place to get started on developing on top of and with methodk8s</li> <li>See the Docs section for a comprehensive rundown of methodk8s capabilities</li> </ul>"},{"location":"index.html#about-methodk8s","title":"About methodk8s","text":"<p>methodk8s provides security operators with a number of data-rich K8s enumeration capabilities to help them gain visibility into their K8s environments. Designed with data-modeling and data-integration needs in mind, methodk8s can be used on its own as an interactive CLI, orchestrated as part of a broader data pipeline, or leveraged from within the Method Platform.</p> <p>The number of security-relevant K8s resources that methodk8s can enumerate are constantly growing. For the most up to date listing, please see the documentation here</p> <p>To learn more about methodk8s, please see the Documentation site for the most detailed information.</p>"},{"location":"index.html#quick-start","title":"Quick Start","text":""},{"location":"index.html#get-methodk8s","title":"Get methodk8s","text":"<p>For the full list of available installation options, please see the Installation page. For convenience, here are some of the most commonly used options:</p> <ul> <li><code>docker run methodsecurity/methodk8s</code></li> <li><code>docker run ghcr.io/method-security/methodk8s</code></li> <li>Download the latest binary from the Github Releases page</li> <li>Installation documentation</li> </ul>"},{"location":"index.html#authentication","title":"Authentication","text":"<p>Authentication can be done in 2 ways: 1. By setting the <code>--path</code> flag to point at a kube config file 2. Setting the <code>$KUBECONFIG</code> env variable to the path of a kube config file</p>"},{"location":"index.html#general-usage","title":"General Usage","text":""},{"location":"index.html#general-usage_1","title":"General Usage","text":"<pre><code>methodk8s &lt;resource&gt; enumerate \n</code></pre>"},{"location":"index.html#examples","title":"Examples","text":"<pre><code>methodk8s pod enumerate --url test-cluster.net\n</code></pre> <pre><code>methodk8s node enumerate --context minikube --path ~/kube/.config\n</code></pre>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>Interested in contributing to methodk8s? Please see our organization wide Contribution page.</p>"},{"location":"index.html#want-more","title":"Want More?","text":"<p>If you're looking for an easy way to tie methodk8s into your broader cybersecurity workflows, or want to leverage some autonomy to improve your overall security posture, you'll love the broader Method Platform.</p> <p>For more information, visit us here</p>"},{"location":"index.html#community","title":"Community","text":"<p>methodk8sis a Method Security open source project.</p> <p>Learn more about Method's open source source work by checking out our other projects here or our organization wide documentation here.</p> <p>Have an idea for a Tool to contribute? Open a Discussion here.</p>"},{"location":"community/community.html","title":"Contributing","text":"<p>For more information on how to get involved in the Method community, please see our organization wide documentation:</p> <ul> <li>Discussions</li> <li>Issues</li> <li>Pull Requests</li> </ul>"},{"location":"development/adding.html","title":"Adding a new capability","text":"<p>By design, methodk8s breaks every unique K8s resource into its own top level command. If you are looking to add a brand new capability to the tool, you can take the following steps.</p> <ol> <li>Add a file to <code>cmd/</code> that corresponds to the sub-command name you'd like to add to the <code>methodk8s</code> CLI</li> <li>You can use <code>cmd/pod.go</code> as a template</li> <li>Your file needs to be a member function of the <code>methodk8s</code> struct and should be of the form <code>Init&lt;cmd&gt;Command</code></li> <li>Add a new member to the <code>methodk8s</code> struct in <code>cmd/root.go</code> that corresponsds to your command name. Remember, the first letter must be capitalized.</li> <li>Call your <code>Init</code> function from <code>main.go</code></li> <li>Add logic to your commands runtime and put it in its own package within <code>internal</code> (e.g., <code>internal/pod</code>)</li> </ol>"},{"location":"development/principles.html","title":"Project Principles","text":""},{"location":"development/principles.html#pre-run-run-post-run","title":"Pre-run -&gt; Run -&gt; Post-run","text":"<p>In the root command, we set a <code>PersistentPreRunE</code> and <code>PersistentPostRunE</code> function that is responsible for initializing the output format and Signal data (in the pre-run) and then write that data in the proper format (in the post-run).</p> <p>Within the Run command that every command must implement, the output of the collected data needs to be written back to the struct's <code>OutputSignal.Content</code> value in order to be properly written out to the caller.</p>"},{"location":"development/principles.html#cmd-vs-internal","title":"Cmd vs Internal","text":"<p>By design, the functionality within each command should focus around parsing the variety of flags and options that the command may need to control capability, passing off all real logic into internal modules.</p>"},{"location":"development/setup.html","title":"Development Setup","text":""},{"location":"development/setup.html#adding-a-new-capability","title":"Adding a new capability","text":"<p>To add a new K8s capability to methodk8s, providing new enumeration capabilities to security operators everywhere, please see the adding a new capability page.</p>"},{"location":"development/setup.html#setting-up-your-development-environment","title":"Setting up your development environment","text":"<p>If you've just cloned methodk8s for the first time, welcome to the community! We use Palantir's godel to streamline local development and goreleaser to handle the heavy lifting on the release process.</p> <p>To get started with godel, you can run</p> <pre><code>./godelw verify\n</code></pre> <p>This will run a number of checks for us, including linters, tests, and license checks. We run this command as part of our CI pipeline to ensure the codebase is consistently passing tests.</p>"},{"location":"development/setup.html#building-the-cli","title":"Building the CLI","text":"<p>We can use godel to build our CLI locally by running</p> <pre><code>./godelw build\n</code></pre> <p>You should see output in <code>out/build/methok8s/&lt;version&gt;/&lt;os&gt;-&lt;arch&gt;/methodk8s</code>.</p> <p>If you'd like to clean this output up, you can run</p> <pre><code>./godelw clean\n</code></pre>"},{"location":"development/setup.html#testing-releases-locally","title":"Testing releases locally","text":"<p>We can use goreleaser locally as well to test our builds. As methodk8s uses cosign to sign our artifacts and Docker containers during our CI pipeline, we'll want to skip this step when running locally.</p> <pre><code>goreleaser release --snapshot --clean --skip sign\n</code></pre> <p>This should output binaries, distributable tarballs/zips, as well as docker images to your local machine's Docker registry.</p>"},{"location":"docs/ingress.html","title":"Ingress","text":"<p>The <code>methodk8s ingress</code> family of commands provide information about a cluster's ingresses.</p>"},{"location":"docs/ingress.html#enumerate","title":"Enumerate","text":"<p>The enumerate command will gather information about all of the ingresses that the provided context have access to. This includes gateway objects as well. If you only want to enumerate gateway objects please see flag options below</p>"},{"location":"docs/ingress.html#usage","title":"Usage","text":"<pre><code>methodk8s ingress enumerate\n</code></pre>"},{"location":"docs/ingress.html#help-text","title":"Help Text","text":"<pre><code>$ methodk8s ingress enumerate -h\nEnumerate Ingress objects\n\nUsage:\n  methodk8s ingress enumerate [flags]\n\nFlags:\n  -h, --help            help for enumerate\n      --types strings   List the types to emumerate (ie.--types ingress --types gateway)\n\nGlobal Flags:\n  -a, --cert string          Base64 encoded ca certificate\n  -c, --context string       Cluster context (ie. minikube)\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -p, --path string          Absolute or relative path to the config file (ie. ~/.kube/config)\n  -q, --quiet                Suppress output\n  -e, --server-url string    Cluster server url\n  -s, --service-account      Set to true if using service account workflow\n  -t, --token string         Base64 encoded service account token\n  -u, --url string           Cluster url (ie. mycluster.com)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/node.html","title":"Node","text":"<p>The <code>methodk8s node</code> family of commands provide information about an cluster's nodes and containers.</p>"},{"location":"docs/node.html#enumerate","title":"Enumerate","text":"<p>The enumerate command will gather information about all of the nodes that the provided context have access to.</p>"},{"location":"docs/node.html#usage","title":"Usage","text":"<pre><code>methodk8s node enumerate\n</code></pre>"},{"location":"docs/node.html#help-text","title":"Help Text","text":"<pre><code>$ methodk8s node enumerate -h\nEnumerate Node objects\n\nUsage:\n  methodk8s node enumerate [flags]\n\nFlags:\n  -h, --help   help for enumerate\n\nGlobal Flags:\n  -a, --cert string          Base64 encoded ca certificate\n  -c, --context string       Cluster context (ie. minikube)\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -p, --path string          Absolute or relative path to the config file (ie. ~/.kube/config)\n  -q, --quiet                Suppress output\n  -e, --server-url string    Cluster server url\n  -s, --service-account      Set to true if using service account workflow\n  -t, --token string         Base64 encoded service account token\n  -u, --url string           Cluster url (ie. mycluster.com)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/pod.html","title":"Pod","text":"<p>The <code>methodk8s pod</code> family of commands provide information about an cluster's pods and containers.</p>"},{"location":"docs/pod.html#enumerate","title":"Enumerate","text":"<p>The enumerate command will gather information about all of the pods and their containers that the provided context have access to.</p>"},{"location":"docs/pod.html#usage","title":"Usage","text":"<pre><code>methodk8s pod enumerate\n</code></pre>"},{"location":"docs/pod.html#help-text","title":"Help Text","text":"<pre><code>$ methodk8s pod enumerate -h\nEnumerate Pod objects\n\nUsage:\n  methodk8s pod enumerate [flags]\n\nFlags:\n  -h, --help   help for enumerate\n\nGlobal Flags:\n  -a, --cert string          Base64 encoded ca certificate\n  -c, --context string       Cluster context (ie. minikube)\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -p, --path string          Absolute or relative path to the config file (ie. ~/.kube/config)\n  -q, --quiet                Suppress output\n  -e, --server-url string    Cluster server url\n  -s, --service-account      Set to true if using service account workflow\n  -t, --token string         Base64 encoded service account token\n  -u, --url string           Cluster url (ie. mycluster.com)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/service.html","title":"Service","text":"<p>The <code>methodk8s service</code> family of commands provide information about an cluster's services and containers.</p>"},{"location":"docs/service.html#enumerate","title":"Enumerate","text":"<p>The enumerate command will gather information about all of the services that the provided context have access to.</p>"},{"location":"docs/service.html#usage","title":"Usage","text":"<pre><code>methodk8s service enumerate\n</code></pre>"},{"location":"docs/service.html#help-text","title":"Help Text","text":"<pre><code>$ methodk8s service enumerate -h\nEnumerate Service objects\n\nUsage:\n  methodk8s service enumerate [flags]\n\nFlags:\n  -h, --help   help for enumerate\n\nGlobal Flags:\n  -a, --cert string          Base64 encoded ca certificate\n  -c, --context string       Cluster context (ie. minikube)\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -p, --path string          Absolute or relative path to the config file (ie. ~/.kube/config)\n  -q, --quiet                Suppress output\n  -e, --server-url string    Cluster server url\n  -s, --service-account      Set to true if using service account workflow\n  -t, --token string         Base64 encoded service account token\n  -u, --url string           Cluster url (ie. mycluster.com)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/serviceaccount.html","title":"ServiceAccount","text":"<p>The <code>methodk8s serviceaccount</code> family of commands provide functionaility to seemlessly configer a Service Account to be used by the method agent to scan your enviroments</p>"},{"location":"docs/serviceaccount.html#configure-creds","title":"Configure Creds","text":"<p>The configure creds command will gather information about your Service Account config and print it to the command line. Use this command to gather the required by the platform to authenticate into your cluster</p>"},{"location":"docs/serviceaccount.html#usage","title":"Usage","text":"<pre><code>methodk8s configure creds \n</code></pre>"},{"location":"docs/serviceaccount.html#help-text","title":"Help Text","text":"<pre><code>$ methodk8s serviceaccount configure creds -h\n\nUsage:\n  methodk8s configure creds [flags]\n\nFlags:\n  -h, --help                help for creds\n      --namespace string    Set the namespace for the Service Account and Secret (default \"default\")\n      --secretname string   The name of the secret to use for authentication (default \"method-sa-secret\")\n\nGlobal Flags:\n  -a, --cert string          Base64 encoded ca certificate\n  -c, --context string       Cluster context (ie. minikube)\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -p, --path string          Absolute or relative path to the config file (ie. ~/.kube/config)\n  -q, --quiet                Suppress output\n  -s, --serviceaccount       Set to true if using service account workflow\n  -t, --token string         Base64 Service account token\n  -u, --url string           Cluster url (ie. mycluster.com)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/serviceaccount.html#configure-apply","title":"Configure Apply","text":"<p>The configure apply command will generate the required .yaml files needed to setup the Service Account in your cluster. The command defaults to 'dry run' where it prints the yaml files to the console.</p>"},{"location":"docs/serviceaccount.html#usage_1","title":"Usage","text":"<pre><code>methodk8s configure apply \n</code></pre>"},{"location":"docs/serviceaccount.html#help-text_1","title":"Help Text","text":"<pre><code>$ methodk8s  configure apply  -h\nCreate a service account in your k8s cluster\n\nUsage:\n  methodk8s serviceaccount configure apply [flags]\n\nFlags:\n  -h, --help               help for apply\n      --namespace string   Set the namespace for the Service Account and Secret (default \"default\")\n      --run                Apply the Service Account yamls (defaults to false)\n\nGlobal Flags:\n  -a, --cert string          Base64 encoded ca certificate\n  -c, --context string       Cluster context (ie. minikube)\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -p, --path string          Absolute or relative path to the config file (ie. ~/.kube/config)\n  -q, --quiet                Suppress output\n  -s, --serviceaccount       Set to true if using service account workflow\n  -t, --token string         Base64 Service account token\n  -u, --url string           Cluster url (ie. mycluster.com)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"getting-started/basic-usage.html","title":"Basic Usage","text":"<p>Before you get started, you will need to export K8s credentials that you want methodk8s to utilize as environment variables. </p>"},{"location":"getting-started/basic-usage.html#binaries","title":"Binaries","text":"<p>Running as a binary means you don't need to do anything additional for methodk8s to leverage the environment variables you have already exported. You can test that things are working properly by running:</p> <pre><code>methodk8s pod enumerate --context minikube --path ~/.kube/config\n</code></pre>"},{"location":"getting-started/basic-usage.html#docker","title":"Docker","text":"<p>Running an authenticated workflow with methodk8s as a Docker container requires that you pass k8s credentials to the container. This can be done in following 2 ways 1. Either by creating a service account and passing in the secrets</p> <pre><code>docker run -e TOKEN=\"XXXX\" -e CLUSTER_URL=\"https://ClusterURL.com\" -e CA_CERT=\"XXXX\" methodsecurity/methodk8s\n</code></pre> <ol> <li>By mounting the k8s config file</li> </ol> <pre><code>docker run -v /path/to/your/kubeconfig:/opt/method/methodk8s/kubeconfig methodsecurity/methodk8s\n</code></pre>"},{"location":"getting-started/installation.html","title":"Getting Started","text":"<p>If you are just getting started with methodk8s, welcome! This guide will walk you through the process of going zero to one with the tool.</p>"},{"location":"getting-started/installation.html#installation","title":"Installation","text":"<p>methodk8s is provided in several convenient form factors, including statically compiled binary images on a variety of architectures as well as a Docker image for both x86 and ARM machines.</p> <p>If you do not see an architecture that you require, please open a Discussion to propose adding it.</p>"},{"location":"getting-started/installation.html#binaries","title":"Binaries","text":"<p>methodk8s currently supports statically compiled binaries across the following operating systems and architectures:</p> OS Architecture Linux 386 Linux arm (goarm 7) Linux amd64 Linux arm64 MacOS amd64 MacOS arm64 Windows amd64 <p>The latest binaries can be downloaded directly from Github.</p>"},{"location":"getting-started/installation.html#docker","title":"Docker","text":"<p>Docker images for methodk8s are hosted in both Github Container Registry as well as on Docker Hub and can be pulled via:</p> <pre><code>docker pull ghcr.io/method-security/methodk8s\n</code></pre> <pre><code>docker pull methodsecurity/methodk8s\n</code></pre>"}]}